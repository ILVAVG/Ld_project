import tensorflow as tf
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–¥–µ–ª–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)
model = load_model('defect_detection_continued.h5')
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")


def analyze_photo(image_path):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ñ–µ–∫—Ç–æ–≤

    Args:
        image_path (str): –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    Returns:
        str: 'defect' –∏–ª–∏ 'not_defect'
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(image_path):
            print(f"‚ùå –§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "error"

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.open(image_path)
        if img.mode != 'RGB':
            img = img.convert('RGB')

        img = img.resize((224, 224))
        img_array = np.array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(img_array, verbose=0)
        defect_prob = float(prediction[0][0])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if defect_prob >= 0.5:
            result = "defect"
        else:
            result = "not_defect"

        print(f"üîç {image_path}: {result} ({defect_prob:.3f})")
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å {image_path}: {e}")
        return "error"


# –ü–†–ò–ú–ï–† –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–æ—Ç–æ
    result = analyze_photo('DSC_2760.jpg')
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

# –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—É—Ç–µ–º –∫ —Ñ–æ—Ç–æ
result = analyze_photo('DSC_2715.jpg')
# result –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'defect' –∏–ª–∏ 'not_defect'
