import tensorflow as tf
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import os
import glob

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = load_model('defect_detection_continued.h5')
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
photo_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.tiff']
image_files = []

for ext in photo_extensions:
    image_files.extend(glob.glob(ext))

print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {len(image_files)}")

# –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ
results = {}

for image_path in image_files:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.open(image_path)
        if img.mode != 'RGB':
            img = img.convert('RGB')

        img = img.resize((224, 224))
        img_array = np.array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(img_array, verbose=0)
        defect_prob = float(prediction[0][0])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if defect_prob >= 0.5:
            status = "defect"
        else:
            status = "not_defect"

        results[image_path] = status
        print(f"üîç {image_path}: {status} ({defect_prob:.3f})")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å {image_path}: {e}")
        results[image_path] = "error"

# –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥
print("\nüìä –ò–¢–û–ì:")
for photo, result in results.items():
    print(f"{photo}: {result}")

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è results —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
# –ü—Ä–∏–º–µ—Ä: {'photo1.jpg': 'defect', 'photo2.jpg': 'not_defect'}